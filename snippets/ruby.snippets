# #!/usr/bin/env ruby
snippet #!
	#!/usr/bin/env ruby
	# encoding: UTF-8

snippet beg
	begin
		${3}
	rescue ${1:Exception} => ${2:e}
	end
snippet req
	require "${1}"${2}
snippet case
	case ${1:object}
	when ${2:condition}
		${3}
	end
snippet when
	when ${1:condition}
		${2}
snippet def
	def ${1:method_name}
		${2}
	end
snippet if
	if ${1:condition}
		${2}
	end
snippet ife
	if ${1:condition}
		${2}
	else
		${3}
	end
snippet elsif
	elsif ${1:condition}
		${2}
snippet unless
	unless ${1:condition}
		${2}
	end
snippet while
	while ${1:condition}
		${2}
	end
snippet for
	for ${1:e} in ${2:c}
		${3}
	end
snippet until
	until ${1:condition}
		${2}
	end
snippet cla class .. end
	class ${1:`substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		${2}
	end
snippet cla class .. initialize .. end
	class ${1:`substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		def initialize(${2:args})
			${3}
		end
	end
snippet cla class .. < ParentClass .. initialize .. end
	class ${1:`substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`} < ${2:ParentClass}
		def initialize(${3:args})
			${4}
		end
	end
snippet cla ClassName = Struct .. do .. end
	${1:`substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`} = Struct.new(:${2:attr_names}) do
		def ${3:method_name}
			${4}
		end
	end
snippet cla class BlankSlate .. initialize .. end
	class ${1:BlankSlate}
		instance_methods.each { |meth| undef_method(meth) unless meth =~ /\A__/ }
	end
snippet cla class << self .. end
	class << ${1:self}
		${2}
	end
# class .. < DelegateClass .. initialize .. end
snippet cla-
	class ${1:`substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`} < DelegateClass(${2:ParentClass})
		def initialize(${3:args})
			super(${4:del_obj})

			${5}
		end
	end
snippet mod module .. end
	module ${1:`substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		${2}
	end
snippet mod module .. module_function .. end
	module ${1:`substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		module_function

		${2}
	end
snippet mod module .. ClassMethods .. end
	module ${1:`substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		module ClassMethods
			${2}
		end

		module InstanceMethods

		end

		def self.included(receiver)
			receiver.extend         ClassMethods
			receiver.send :include, InstanceMethods
		end
	end
# attr_reader
snippet r
	attr_reader :${1:attr_names}
# attr_writer
snippet w
	attr_writer :${1:attr_names}
# attr_accessor
snippet rw
	attr_accessor :${1:attr_names}
snippet atp
	attr_protected :${1:attr_names}
snippet ata
	attr_accessible :${1:attr_names}
# include Enumerable
snippet Enum
	include Enumerable

	def each(&block)
		${1}
	end
# include Comparable
snippet Comp
	include Comparable

	def <=>(other)
		${1}
	end
# extend Forwardable
snippet Forw
	extend Forwardable
# def self
snippet defs
	def self.${1:class_method_name}
		${2}
	end
# def method_missing
snippet defmm
	def method_missing(meth, *args, &blk)
		${1}
	end
snippet defd
	def_delegator :${1:@del_obj}, :${2:del_meth}, :${3:new_name}
snippet defds
	def_delegators :${1:@del_obj}, :${2:del_methods}
snippet am
	alias_method :${1:new_name}, :${2:old_name}
snippet array
	Array.new(${1:10}) { |${2:i}| ${3} }
snippet hash
	Hash.new { |${1:hash}, ${2:key}| $1[$2] = ${3} }
snippet file File.foreach() { |line| .. }
	File.foreach(${1:"path/to/file"}) { |${2:line}| ${3} }
snippet file File.read()
	File.read(${1:"path/to/file"})${2}
snippet Dir
	Dir[${1:"glob/**/*.rb"}]${2}
snippet zip
	zip(${1:enums}) { |${2:row}| ${3} }
snippet ste
	step(${1:2}) { |${2:n}| ${3} }
snippet tim
	times { |${1:n}| ${2} }
snippet loo
	loop { ${1} }
snippet ea
	each { |${1:e}| ${2} }
snippet ead
	each do |${1:e}|
		${2}
	end
snippet eald
	each_line do |${1:line}|
		${2}
	end
snippet eawi
	each_with_index { |${1:e}, ${2:i}| ${3} }
snippet eawid
	each_with_index do |${1:e},${2:i}|
		${3}
	end
snippet map
	map { |${1:e}| ${2} }
snippet mapd
	map do |${1:e}|
		${2}
	end
snippet sor
	sort { |a, b| ${1} }
snippet sorb
	sort_by { |${1:e}| ${2} }
snippet all
	all? { |${1:e}| ${2} }
snippet any
	any? { |${1:e}| ${2} }
snippet col
	collect { |${1:e}| ${2} }
snippet cold
	collect do |${1:e}|
		${2}
	end
snippet det
	detect { |${1:e}| ${2} }
snippet detd
	detect do |${1:e}|
		${2}
	end
snippet fet
	fetch(${1:name}) { |${2:key}| ${3} }
snippet fin
	find { |${1:e}| ${2} }
snippet find
	find do |${1:e}|
		${2}
	end
snippet gre
	grep(${1:/pattern/}) { |${2:match}| ${3} }
snippet sub
	${1:g}sub(${2:/pattern/}) { |${3:match}| ${4} }
snippet sca
	scan(${1:/pattern/}) { |${2:match}| ${3} }
snippet scad
	scan(${1:/pattern/}) do |${2:match}|
		${3}
	end
snippet max
	max { |a, b| ${1} }
snippet min
	min { |a, b| ${1} }
snippet par
	partition { |${1:e}| ${2} }
snippet pard
	partition do |${1:e}|
		${2}
	end
snippet rej
	reject { |${1:e}| ${2} }
snippet rejd
	reject do |${1:e}|
		${2}
	end
snippet sel
	select { |${1:e}| ${2} }
snippet seld
	select do |${1:e}|
		${2}
	end
snippet lam
	lambda { |${1:args}| ${2} }
snippet do
	do
		${1}
	end
snippet dov
	do |${1:variable}|
		${2}
	end
snippet :
	:${1:key} => ${2:"value"}${3}
# Benchmark.bmbm do .. end
snippet bm
	require 'benchmark'

	TESTS = ${1:10_000}
	Benchmark.bmbm do |results|
		${2}
	end
snippet rep
	results.report("${1:name}:") { TESTS.times { ${2} }}
snippet b
	{ |${1:var}| ${2} }

#############################################
# Rails snippets - for pure Ruby, see above #
#############################################
snippet flash
	flash[:${1:notice}] = "${2}"
snippet log
	Rails.logger.${1:debug} ${2}
snippet logd
	logger.debug { "${1:message}" }${2}
snippet loge
	logger.error { "${1:message}" }${2}
snippet logf
	logger.fatal { "${1:message}" }${2}
snippet logi
	logger.info { "${1:message}" }${2}
snippet logw
	logger.warn { "${1:message}" }${2}
snippet oa
	order("${1:field}")
snippet od
	order("${1:field} DESC")
snippet pa
	params[:${1:id}]${2}
snippet rf
	render :file => "${1:filepath}"
snippet rfu
	render :file => "${1:filepath}", :use_full_path => ${2:false}
snippet ri
	render :inline => "${1:<%= 'hello' %>}"
snippet ril
	render :inline => "${1:<%= 'hello' %>}", :locals => { ${2::name} => "${3:value}"${4} }
snippet rit
	render :inline => "${1:<%= 'hello' %>}", :type => ${2::rxml}
snippet rjson
	render :json => ${1:text to render}
snippet rl
	render :layout => "${1:layoutname}"
snippet rn
	render :nothing => ${1:true}
snippet rns
	render :nothing => ${1:true}, :status => ${2:401}
snippet rp
	render :partial => "${1:item}"
snippet rpc
	render :partial => "${1:item}", :collection => ${2:@$1s}
snippet rpl
	render :partial => "${1:item}", :locals => { :${2:$1} => ${3:@$1}
snippet rpo
	render :partial => "${1:item}", :object => ${2:@$1}
snippet rps
	render :partial => "${1:item}", :status => ${2:500}
snippet rt
	render :text => "${1:text to render}"
snippet rtl
	render :text => "${1:text to render}", :layout => "${2:layoutname}"
snippet rtlt
	render :text => "${1:text to render}", :layout => ${2:true}
snippet rts
	render :text => "${1:text to render}", :status => ${2:401}
snippet sha1
	Digest::SHA1.hexdigest(${1:string})
snippet wc
	where(${1:"conditions"}${2:, bind_var})
snippet wh
	where(${1:field} => ${2:value})
snippet it
	it "${1:spec_name}" do
		${2}
	end
snippet itp
	it "${1:spec_name}"
	${2}
snippet desc
	describe ${1:class_name} do
		${2}
	end
snippet cont
	context "${1:message}" do
		${2}
	end
snippet bef
	before do
		${1}
	end
snippet aft
	after do
		${1}
	end
snippet befa
	before :all do
		${1}
	end
snippet afta
	after :all do
		${1}
	end
