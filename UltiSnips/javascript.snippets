# Prototype
snippet proto "proto"
${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
	${4:// body...}
};
endsnippet

# Anonymous Function
snippet f "f"
function(${1}) {
	${3}
}${2:;}
endsnippet

# Immediate function
snippet (f "(f"
(function(${1}) {
	${3:/* code */}
}(${2}));
endsnippet

# if
snippet if "if"
if (${1:true}) {
	${2}
}
endsnippet

# if ... else
snippet ife "ife"
if (${1:true}) {
	${2}
} else {
	${3}
}
endsnippet

# ternary conditional
snippet t "t"
${1:/* condition */} ? ${2:a} : ${3:b}
endsnippet

# switch
snippet switch "switch"
switch(${1:expression}) {
	case '${3:case}':
		${4:// code}
		break;
	${5}
	default:
		${2:// code}
}
endsnippet

# case
snippet case "case"
case '${1:case}':
	${2:// code}
	break;
${3}
endsnippet

# for (...) {...}
snippet for "for"
for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3: += 1}) {
	${4:$1[$2]}
}
endsnippet

# for (...) {...} (Improved Native For-Loop)
snippet forr "forr"
for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3: -= 1}) {
	${4:$1[$2]}
}
endsnippet

# while (...) {...}
snippet wh "wh"
while (${1:/* condition */}) {
	${2:/* code */}
}
endsnippet

# try
snippet try "try"
try {
	${1:/* code */}
} catch(${2:e}) {
	${3:/* handle error */}
}
endsnippet

# do...while
snippet do "do"
do {
	${2:/* code */}
} while (${1:/* condition */});
endsnippet

# Object Method
snippet :f ":f"
${1:method_name}: function(${2:attribute}) {
	${4}
}${3:,}
endsnippet

# console.log (Firebug)
snippet log "log"
console.log(${1});
endsnippet

# return
snippet ret "ret"
return ${1:result}
endsnippet

# for (property in object ) { ... }
snippet fori "fori"
for (var ${1:prop} in ${2:Things}) {
	${3:$2[$1]}
}
endsnippet


