" Enable true color
let $NVIM_TUI_ENABLE_TRUE_COLOR = 1

" Quickly open a Ruby REPL
nnoremap <Leader>e :bel 10split term://pry<CR>

" Run selection in a Ruby REPL
vnoremap <Leader>e y:bel 10split term://pry<CR><C-\><C-n>pi<CR>

""" Terminal-related config

" Bind <C-\><C-t> to open a new terminal split in normal and terminal modes
tnoremap <C-\><C-t> <C-\><C-n>:split<CR><C-\><C-n>:term<CR>
nnoremap <C-\><C-t> <C-\><C-n>:split<CR><C-\><C-n>:term<CR>

" Bind <C-\><C-\> to exit terminal
tnoremap <C-\><C-\> <C-\><C-n>

" Bind <C-\><C-k> to <C-k> for line editing
tnoremap <C-\><C-k> <C-k>

" Increase scrollback
let g:terminal_scrollback_buffer_size=100000

" Allow tab navigation directly from terminal
tnoremap <C-h> <C-\><C-n><C-w>h
tnoremap <C-j> <C-\><C-n><C-w>j
tnoremap <C-k> <C-\><C-n><C-w>k
tnoremap <C-l> <C-\><C-n><C-w>l

" On entering a terminal buffer, automatically focus
autocmd BufWinEnter,WinEnter term://* startinsert

" Fix meta bindings in terminal
for c in range(0, 25)
  let char=nr2char(c + char2nr("a"))
  exec "tnoremap <M-" . char . "> <Esc>" . char

  let char=nr2char(c + char2nr("A"))
  exec "tnoremap <M-" . char . "> <Esc>" . char
endfor

" In terminal buffers, make <Enter> automatically jump into insert mode
nnoremap <expr> <Enter> &buftype == 'terminal' ? 'i<CR>' : '<CR>'

""" FZF configuration

let g:fzf_command_prefix = 'Fzf'
let g:fzf_nvim_statusline = 0
let g:fzf_layout = { 'down': '~20' }
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }

autocmd TermOpen *bin/fzf* setlocal statusline=\ 

function! s:fzf_set_color_options()
  if !exists('g:fzf_color_map')
    return
  endif
  let $FZF_DEFAULT_OPTS = '--color=' .
    \ join(values(map(copy(g:fzf_color_map), 'v:key . ":" . v:val')), ',')
endfunction

autocmd ColorScheme * call s:fzf_set_color_options()
call s:fzf_set_color_options()

nnoremap <Leader>t :FzfBuffers<CR>
nnoremap <Leader>T :FzfFiles<CR>

" Load and bind custom FZF functions
exec "source " . g:vimfiles_dir . "/lib/custom_fzf_funcs.vim"

command! -bang -nargs=* -complete=dir Ag call custom_fzf_funcs#ag(<q-args>)

nnoremap <Leader>a "zyiw:exe "Ag ".@z.""<CR>
nnoremap <Leader>f :Ag<Space>
nnoremap <Leader>` :call custom_fzf_funcs#notes()<CR>
nnoremap <Leader>p :call custom_fzf_funcs#paste()<CR>

" VimOutliner

function! s:votl_setup(filename)
  setlocal nowrap
  setlocal viewoptions=folds,cursor " only save folds and cursor pos
  silent! unmap <buffer> <C-k>

  let filename = resolve(fnamemodify(a:filename, ':p'))

  " If the file is inside the notes directory, clean up the statusline.
  if filename[:strlen(g:notes_dir) - 1] == g:notes_dir
    let filename = filename[strlen(g:notes_dir):]        " remove notes dir
    let filename = fnamemodify(filename, ':r')           " remove extension
    let filename = substitute(filename, ' ', '\\ ', 'g') " escape spaces

    exec 'setlocal statusline=[Note]\ ' . filename

    " Set view file location to also be inside the notes directory, so it gets
    " synced between computers.
    exec 'setlocal viewdir=' .  substitute(g:notes_dir, ' ', '\\ ', 'g') . '/.views'
    silent! loadview
  end

  augroup votlFolds
    autocmd! * <buffer>
    autocmd BufWinLeave <buffer> mkview
  augroup END
endfunction
autocmd FileType votl call s:votl_setup(@%)
