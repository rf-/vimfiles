" Enable true color
let $NVIM_TUI_ENABLE_TRUE_COLOR = 1

" Quickly open a Ruby REPL
nnoremap <Leader>e :bel 10split term://pry<CR>

" Run selection in a Ruby REPL
vnoremap <Leader>e y:bel 10split term://pry<CR><C-\><C-n>pi<CR>

""" Terminal-related config

" Bind <C-\><C-t> to open a new terminal split in normal and terminal modes
tnoremap <C-\><C-t> <C-\><C-n>:split<CR><C-\><C-n>:term<CR>
nnoremap <C-\><C-t> <C-\><C-n>:split<CR><C-\><C-n>:term<CR>

" Bind <C-\><C-\> to exit terminal
tnoremap <C-\><C-\> <C-\><C-n>

" Bind <C-\><C-k> to <C-k> for line editing
tnoremap <C-\><C-k> <C-k>

" Increase scrollback
let g:terminal_scrollback_buffer_size=100000

" Allow tab navigation directly from terminal
tnoremap <C-h> <C-\><C-n><C-w>h
tnoremap <C-j> <C-\><C-n><C-w>j
tnoremap <C-k> <C-\><C-n><C-w>k
tnoremap <C-l> <C-\><C-n><C-w>l

" On entering a terminal buffer, automatically focus
autocmd BufWinEnter,WinEnter term://* startinsert

" Fix meta bindings in terminal
for c in range(0, 25)
  let char=nr2char(c + char2nr("a"))
  exec "tnoremap <M-" . char . "> <Esc>" . char

  let char=nr2char(c + char2nr("A"))
  exec "tnoremap <M-" . char . "> <Esc>" . char
endfor

" In terminal buffers, make <Enter> automatically jump into insert mode
nnoremap <expr> <Enter> &buftype == 'terminal' ? 'i<CR>' : '<CR>'

""" FZF configuration

let g:fzf_command_prefix = 'Fzf'
let g:fzf_nvim_statusline = 0
let g:fzf_layout = { 'down': '~20' }
autocmd TermOpen *bin/fzf* setlocal statusline=\ 

function! s:fzf_set_color_options()
  if !exists('g:fzf_color_map')
    return
  endif
  let $FZF_DEFAULT_OPTS = '--color=' .
    \ join(values(map(copy(g:fzf_color_map), 'v:key . ":" . v:val')), ',')
endfunction

autocmd ColorScheme * call s:fzf_set_color_options()
call s:fzf_set_color_options()

let s:notes_dir = resolve(fnamemodify('~/.vim/notes/', ':p'))

function! s:fzf_notes_handler(lines)
  let lines = len(a:lines) > 1 ? a:lines[1:] : a:lines
  let filenames = map(lines,
    \ 'substitute(s:notes_dir . v:val . ".otl", " ", "\\\\ ", "g")')
  split
  exec 'args ' . join(filenames, ' ')
endfunction

function! s:fzf_find_notes(...)
  let dir_len = strlen(s:notes_dir)
  let filenames = split(glob(s:notes_dir . '**/*.otl'), '\n')
  let notes = map(filenames,
    \ 'strpart(v:val, ' . dir_len . ', strlen(v:val) - ' . dir_len . ' - 4)')

  call fzf#run({
  \ 'source':  notes,
  \ 'sink*':   function('s:fzf_notes_handler'),
  \ 'options': '--multi --prompt "Notes> " --print-query ' .
  \            '--bind ctrl-a:select-all,ctrl-d:deselect-all',
  \ 'down':    '~10',
  \})
endfunction

command! FzfNotes :call s:fzf_find_notes()

nnoremap <Leader>a "zyiw:exe "FzfAg ".@z.""<CR>
nnoremap <Leader>f :FzfAg<Space>
nnoremap <Leader>t :FzfBuffers<CR>
nnoremap <Leader>T :FzfFiles<CR>
nnoremap <Leader>` :FzfNotes<CR>

" VimOutliner

function! s:votl_statusline(filename)
  let filename = resolve(fnamemodify(a:filename, ':p'))

  " If the file is inside the notes directory, clean up the statusline.
  if filename[:strlen(s:notes_dir) - 1] == s:notes_dir
    let filename = filename[strlen(s:notes_dir):]        " remove notes dir
    let filename = fnamemodify(filename, ':r')           " remove extension
    let filename = substitute(filename, ' ', '\\ ', 'g') " escape spaces

    exec 'setlocal statusline=[Note]\ ' . filename
  end
endfunction
autocmd FileType votl call s:votl_statusline(@%)
