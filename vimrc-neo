" Enable true color and special cursor for insert mode
if $TERM_PROGRAM == "iTerm.app"
  set termguicolors
endif
set guicursor=i:ver1,a:blinkon0

" Use cool popup blending
set pumblend=20
set winblend=10

" Use popup menu for command-line completion
set wildoptions=pum

" See instant feedback when entering commands
set inccommand=nosplit

" Quickly open a Ruby REPL
nnoremap <Leader>e :bel 10split term://pry<CR>

" Run selection in a Ruby REPL
vnoremap <Leader>e y:bel 10split term://pry<CR><C-\><C-n>pi<CR>

" Enable echodoc for use with deoplete
let g:echodoc#enable_at_startup = 1
let g:echodoc#type = 'floating'

" Enable deoplete; override enter behavior with popup open
let g:deoplete#enable_at_startup = 1
inoremap <silent> <CR> <C-r>=<SID>close_popup_and_insert_cr()<CR>
function! s:close_popup_and_insert_cr() abort
  return deoplete#close_popup() . "\<CR>"
endfunction

" Set up mappings for ALE LSP functionality
autocmd FileType javascript,typescript,typescriptreact nnoremap <buffer> <silent> <C-p> :ALEHover<CR>
autocmd FileType javascript,typescript,typescriptreact nnoremap <buffer> <silent> <C-]> :ALEGoToDefinition<CR>
autocmd FileType javascript,typescript,typescriptreact nnoremap <buffer> <silent> <Leader><C-]> :ALEGoToTypeDefinition<CR>
autocmd FileType javascript,typescript,typescriptreact nnoremap <buffer> <silent> K :ALEDocumentation<CR>
autocmd FileType javascript,typescript,typescriptreact nnoremap <buffer> <silent> <Leader>ir :ALERename<CR>

""" Terminal-related config

" Fix meta bindings in terminal
for c in range(0, 25)
  let char=nr2char(c + char2nr("a"))
  exec "tnoremap <M-" . char . "> <Esc>" . char

  let char=nr2char(c + char2nr("A"))
  exec "tnoremap <M-" . char . "> <Esc>" . char
endfor

" Bind <C-\><C-[> and <C-\><C-]> to switch tabs in all modes
tnoremap <C-\><C-[> <C-\><C-n>gT
tnoremap <C-\><C-]> <C-\><C-n>gt
nnoremap <C-\><C-[> gT
nnoremap <C-\><C-]> gt
vnoremap <C-\><C-[> gT
vnoremap <C-\><C-]> gt
inoremap <C-\><C-[> <C-o>gT
inoremap <C-\><C-]> <C-o>gt

" Bind <C-\><C-t> to open a new terminal split in normal and terminal modes
tnoremap <C-\><C-t> <C-\><C-n>:split<CR><C-\><C-n>:term<CR>
nnoremap <C-\><C-t> <C-\><C-n>:split<CR><C-\><C-n>:term<CR>

" Bind <C-\><C-p> to paste for convenience
tnoremap <C-\><C-p> <C-\><C-n>p

" Bind <C-\><C-\> to exit terminal
tnoremap <C-\><C-\> <C-\><C-n>

" Bind <M-k> to <C-k> for line editing
tnoremap <M-k> <C-k>

" Increase scrollback
let g:terminal_scrollback_buffer_size=100000

" Allow split navigation directly from terminal
tnoremap <C-h> <C-\><C-n><C-w>h
tnoremap <C-j> <C-\><C-n><C-w>j
tnoremap <C-k> <C-\><C-n><C-w>k
tnoremap <C-l> <C-\><C-n><C-w>l

" On entering a terminal buffer, automatically enter insert mode unless we're
" scrolled up
function! s:start_insert_if_at_bottom()
  if (line('w$') >= line('$'))
    startinsert
  endif
endfunction
autocmd TermOpen,BufWinEnter,WinEnter term://* call s:start_insert_if_at_bottom()

" When opening a term, disable line numbers; when leaving one, enable them
autocmd TermOpen,BufWinEnter term://* setlocal nonumber
autocmd BufWinLeave term://* setlocal number

" In terminal buffers, make <Enter> automatically jump into insert mode
nnoremap <expr> <Enter> &buftype == 'terminal' ? 'i<CR>' : '<CR>'
