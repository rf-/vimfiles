This is based pretty heavily on Janus (https://github.com/carlhuda/janus).

Installation:

* Compile and install MacVim with all the stuff in it.
  (https://github.com/b4winckler/macvim/wiki/Building)

* Make this your .vim folder.

* Symlink gvimrc and vimrc to the right places.

    ln -s ~/.vim/gvimrc ~/.gvimrc
    ln -s ~/.vim/vimrc ~/.vimrc

* Install Ack.

    sudo cpan App::Ack

* Probably do vimtutor on the command line if you haven't already. Gotta get the basics down.

Stuff you can do that is different from normal (Mac)Vim, off the top of my head:

  Note that in all of this, when I say 'window' I mean a frame inside the actual MacVim
  window. I never use tabs, and I generally only open a new MacVim window if I want to
  work in a different 'project' context.

* Tabs, splitting, and window management

  You can have a bunch of files open at once, and a bunch of views open, and switch
  among them independently.

  Use :split to split the window horizontally and :vsplit to split it vertically.

  Ctrl-tab switches which file is shown in the current window. Ctrl-<arrow key> moves
  the cursor between your open windows.

  When you have more than one file open, MiniBufExpl will pop open at the top to show
  them and highlight the ones that are open. You can double-click on a file up there
  to open it in the current window, or move the cursor up there and hit enter on a file
  name, or just use ctrl-tab instead.

  To close a window without closing the file, hit cmd-w. To close a file without closing
  the window (much more common/desirable for me), hit cmd-shift-w.

  Remember that you can drag borders with the mouse to resize windows. Occasionally it'll
  get confused and make NERDTree huge or put things in weird places, etc., but it's easy
  to fix by just closing most of the windows and dragging the borders back to where they
  should be.

* NERDTree and other project management

  Hit \n to bring up a tree view of your current directory. You can change directories
  with either ':cd <directory>' or by typing 'C' (change nerdtree's base directory)
  and/or 'cd' (change vim's working directory) on a directory within the tree.

  Hit cmd-t to do TextMate-style fuzzy filename match within the project, and then
  enter to open the one you want from the list. Type ':CommandTFlush' to reset the index
  so you can find newly added files.

  Alternately, you can open any file non-fuzzily by typing :e <filename>, or do the same thing
  with your current location autofilled by typing \e. Here, as everywhere, tab completion
  is a really good idea.

  Hit cmd-shift-f to do TextMate-style regex search within the project (or just type
  ':Ack'). This is a thin layer on top of the Ack command-line tool, so there are a couple
  of annoying things about it. One is that you have to quote your search string if it has
  spaces in it. Another is that vim tries to do weird substitution of # characters and so it's
  (almost?) impossible to search for a literal #. Usually in that situation I'll just use
  normal Ack from the terminal. It's often handy to use the -Q flag to search for a literal
  string, so I can find things like 'foo(' without worrying about escaping the paren.

* Git

  I use a plugin called Fugitive that does a ton of handy stuff. The commands I use most often
  are :Gstatus, :Gcommit, and :Gblame, but you should really just go read about it if you're
  planning to use it: https://github.com/tpope/vim-fugitive

* Snipmate

  This is like TextMate's snippets. I never consciously use it, but it's kind of nice that you
  can just type 'def<Tab>' or whatever and get some boilerplate filled in. I'm not sure exactly
  what it's capable of.

* Tab completion

  It's not very smart, but you can just type tab in insert mode (not at the beginning of a line)
  to get pretty handy autocomplete. It basically just looks at all the words in all your open files,
  but that is good enough to save some typing.

* Conque-Shell

  This is not great and I don't use it very much, but it's nice to have in theory. Cmd-E opens a
  shell in your current directory, which acts just like a normal window only you can type commands
  into it.

* HexHighlight

  I haven't assigned a shortcut for this, but it's pretty handy. ':call HexHighlight()' searches
  for hex color codes in the current file and makes them look like blocks of the appropriate color.

* Gundo

  This isn't that useful but it is pretty awesome. You can hit cmd-u to see a tree representation of
  the undo history of the current file and revisit previous revisions. That means that it's impossible
  to lose any work without closing the file. If you hit undo like fifty times in a row and then
  accidentally make a change, you can just bring up gundo and find the point you want to go back to.
  For more details: http://sjl.bitbucket.org/gundo.vim/

* Align

  I think there are better plugins I could get for this, but for now I'm using this one. If you want to
  line some stuff up, highlight those lines (shift-v for visual line mode, up or down arrow to expand)
  and then type ':Align <character you want to line up by>'.

* Other key bindings

  Cmd-[ and ] shift indentation, just like TextMate.

  Cmd-/ toggles commentedness on your current line (or selected lines), which might be like TextMate, I forget.

  Cmd-enter is full screen, like every other Mac program.

  Typing 'jj' in insert mode is the same as hitting escape, which some people like a lot, but I always
  forget to use it.

* Colors

  The default color right now is wombat, but there are more in the colors directory. All the ones that come
  with vim are really really bad, but the ones I've included are better imo.
  ('ryandark' is a modified version of railscasts.)

* Adding more stuff

  I've been putting colors into the colors folder directly since it is less dumb than having a separate folder
  for each color file, but most things you can just clone straight off github into the bundle folder
  (because of pathogen).

